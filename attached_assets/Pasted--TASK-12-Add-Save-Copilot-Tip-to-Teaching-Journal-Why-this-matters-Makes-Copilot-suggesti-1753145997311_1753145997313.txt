✅ TASK 12: Add “📘 Save Copilot Tip” to Teaching Journal
🧠 Why this matters:
Makes Copilot suggestions actionable and lasting

Adds long-term teacher value (they build their own resource bank)

Reinforces trust and reflection in the tool

🪜 Step-by-Step Replit Instructions
✅ STEP 1: Create a CopilotTip Model
👨‍💻 File: models.py
Add this model under Lesson:

python
Copy
Edit
class CopilotTip(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    grade = db.Column(db.String(20))
    subject = db.Column(db.String(50))
    topic = db.Column(db.String(200))
    sel_focus = db.Column(db.String(100))
    content = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
Then create the table:

bash
Copy
Edit
python
python
Copy
Edit
from app import db
from models import CopilotTip
CopilotTip.__table__.create(db.engine, checkfirst=True)
exit()
✅ STEP 2: Add Save Copilot Route
👨‍💻 File: main.py
Add this route:

python
Copy
Edit
@app.route('/save_copilot', methods=['POST'])
def save_copilot():
    try:
        data = request.json
        tip = CopilotTip(
            grade=data.get('grade', ''),
            subject=data.get('subject', ''),
            topic=data.get('topic', ''),
            sel_focus=data.get('sel', ''),
            content=data.get('content', '')
        )
        db.session.add(tip)
        db.session.commit()
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
✅ STEP 3: Add a “Save Tip” Button to Copilot Panel
👨‍💻 File: templates/index.html
Update the Copilot panel update logic in the JS fetch block:

javascript
Copy
Edit
panel.innerHTML = `
  <pre id="copilotContent" style="white-space: pre-wrap; font-size: 0.9rem;">${data.suggestions}</pre>
  <button class="btn btn-sm btn-success mt-2" onclick="saveCopilotTip()">📘 Save Tip</button>
  <button onclick="toggleCopilot()" class="btn btn-sm btn-outline-danger mt-2 ms-2">Close</button>
`;
Then add this JS function:

html
Copy
Edit
<script>
function saveCopilotTip() {
  const content = document.getElementById("copilotContent").innerText;
  const grade = document.querySelector("select[name='grade']").value;
  const subject = document.querySelector("select[name='subject']").value;
  const topic = document.querySelector("input[name='topic']").value;
  const sel = document.querySelector("select[name='sel']").value;

  fetch('/save_copilot', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ grade, subject, topic, sel, content })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      alert("✅ Copilot tip saved to journal!");
    } else {
      alert("❌ Error saving tip.");
    }
  });
}
</script>
✅ STEP 4: Add Journal to Dashboard
👨‍💻 File: main.py

Update your /dashboard route:

python
Copy
Edit
from models import Lesson, CopilotTip

@app.route('/dashboard')
def dashboard():
    lessons = Lesson.query.order_by(Lesson.created_at.desc()).all()
    copilot_tips = CopilotTip.query.order_by(CopilotTip.created_at.desc()).all()
    return render_template('dashboard.html', lessons=lessons, tips=copilot_tips)
👨‍💻 File: templates/dashboard.html

At the bottom, show saved tips:

html
Copy
Edit
<hr class="mt-5">
<h4>📘 Teaching Journal – Copilot Tips</h4>

{% if tips %}
  <div class="row">
    {% for tip in tips %}
      <div class="col-md-6 mb-3">
        <div class="card shadow-sm">
          <div class="card-header bg-light">
            {{ tip.grade }} • {{ tip.subject }} • {{ tip.sel_focus }}
          </div>
          <div class="card-body" style="white-space: pre-wrap;">
            {{ tip.content }}
          </div>
          <div class="card-footer text-muted small">
            Saved on {{ tip.created_at.strftime('%Y-%m-%d') }}
          </div>
        </div>
      </div>
    {% endfor %}
  </div>
{% else %}
  <p class="text-muted">No Copilot tips saved yet.</p>
{% endif %}
🧠 You Now Have:
A smart Copilot that suggests context-aware SEL support

A “📘 Save Tip” feature that logs Copilot advice into a teacher journal

A personal library teachers can build over time for reuse or reflection